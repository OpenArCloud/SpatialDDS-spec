// SPDX-License-Identifier: MIT
// SpatialDDS Lidar Extension 1.0  â€” extension profile

module spatial {
  module lidar {

    // Reuse Core primitives per SpatialDDS 1.3
    typedef spatial::core::Time    Time;
    typedef spatial::core::PoseSE3 PoseSE3;
    typedef spatial::core::BlobRef BlobRef;

    enum LidarType { SPINNING_2D = 0, MULTI_BEAM_3D = 1, SOLID_STATE = 2 };
    enum PointLayout { XYZ_I = 0, XYZ_I_R = 1, XYZ_I_R_N = 2 }; // N = normal; R = ring/id
    enum LidarCodec { CODEC_NONE = 0, ZSTD = 1, LZ4 = 2, DRACO = 10, PCD_ZLIB = 20 };
    enum CloudEncoding { PCD = 0, PLY = 1, LAS = 2, CUSTOM_BIN = 255 };

    @appendable struct LidarMeta {
      @key string stream_id;          // stable sensor stream id
      LidarType type;
      string frame_id;                // mounting frame
      PoseSE3  T_bus_sensor;          // extrinsics (sensor in bus frame)
      double nominal_rate_hz;
      // Intrinsics / geometry
      uint16 n_rings;                 // 0 if N/A
      float  min_range_m; float max_range_m;
      float  horiz_fov_deg_min; float horiz_fov_deg_max;
      float  vert_fov_deg_min;  float vert_fov_deg_max;
      // Default wire encoding for frames
      CloudEncoding encoding;
      LidarCodec    codec;
      PointLayout   layout;           // expected point fields when decoded
      string schema_version;          // "spatial.lidar/1.0"
    };

    @appendable struct LidarFrame {
      @key string stream_id;
      uint64 frame_seq;
      Time   stamp;
      // Optional dynamic pose if the platform moves between frames
      PoseSE3 sensor_pose;            // pose at acquisition (same frame_id)
      boolean has_sensor_pose;

      // Where to fetch bytes; each blob is a chunk of the same frame
      sequence<BlobRef, 128> blobs;

      // Post-decode expectations (mirrors meta; allows per-frame overrides)
      CloudEncoding encoding;
      LidarCodec    codec;
      PointLayout   layout;

      // Quality hints
      float average_range_m;
      float percent_valid;            // 0..100
    };

    // Lightweight derivative for immediate fusion/tracking (optional)
    @appendable struct LidarDetection {
      double xyz_m[3];
      float  intensity;
      uint16 ring;
      float  quality;                 // 0..1
    };

    @appendable struct LidarDetectionSet {
      @key string stream_id;
      uint64 frame_seq;
      string frame_id;
      sequence<LidarDetection, 65536> dets;
      Time   stamp;
    };
  };
}
